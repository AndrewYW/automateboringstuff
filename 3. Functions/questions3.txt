1. Why are functions advantageous to have in your programs?
  Reduce need for duplicate code, easier to read and update
2. When does the code in a function execute: when the function is defined or when the function is called?
  Called
3. What statement creates a function?
  def
4. What is the difference between a function and a function call?
  Function call moves the program execution into the function, evaluating to the function's return value
5. How many global scopes are there in a Python program? How many local scopes?
  one global scope, a local scope is created whenever a function is called
6. What happens to variables in a local scope when the function call returns?
  Local scope is destroyed, all variables in it are forgotten
7. What is a return value? Can a return value be part of an expression?
  value that a function call evaluates to. Yes, it is just like any other value
8. If a function does not have a return statement, what is the return value of a call to that function?
  None
9. How can you force a variable in a function to refer to the global variable?
  global statement will force the reference
10. What is the data type of None?
  NoneType
11. What does the "import areallyourpetsnamederic" statement do?
  imports a module named areallyourpetsnamederic
12. If you had a function named bacon() in a module named spam, how would you call it after importing spam?
  spam.bacon()
13. How can you prevent a program from crashing when it gets an error?
  Place line of code that might cause error in a try clause
14. What goes in the try clause? What goes in the except clause?
  Potential error goes in try clause, code that executes if error happens goes in except clause.
